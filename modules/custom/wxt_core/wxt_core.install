<?php

/**
 * @file
 * Install and uninstall functions for the WxT installation profile.
 */

use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_requirements().
 */
function wxt_core_requirements($phase) {
  $requirements = [];

  if ($phase === 'install') {
    $info = Drupal::service('extension.list.profile')
      ->get('wxt')
      ->getPathname();

    if (strstr(file_get_contents($info), '# Information added by Drupal.org packaging script')) {
      $requirements['wxt_reject_tarball'] = [
        'title' => t('Missing Composer dependencies'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('WxT appears to have been downloaded as an archive from drupal.org. WxT cannot be installed this way because drupal.org does not package all the necessary dependencies. Please visit <a href="https://drupalwxt.github.io">this GitHub repository</a> for instructions on how to build WxT using Composer.'),
      ];
    }
  }
  return $requirements;
}

/**
 * Updates for the WxT 4.0.0 release.
 */
function wxt_core_update_8403() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $modules_to_check = [
    'libraries' => (drupal_get_installed_schema_version('libraries') >= 0) ? TRUE : FALSE,
    'lightning' => (drupal_get_installed_schema_version('lightning') >= 0) ? TRUE : FALSE,
    'lightning_install' => (drupal_get_installed_schema_version('lightning_install') >= 0) ? TRUE : FALSE,
    'wxt_ext_translation' => (drupal_get_installed_schema_version('wxt_ext_translation') >= 0) ? TRUE : FALSE,
  ];

  $needs_uninstalling = FALSE;
  $modules_to_uninstall = [];
  $uninstalled = TRUE;

  foreach ($modules_to_check as $module => $installed) {
    if ($installed) {
      $needs_uninstalling = TRUE;
      $modules_to_uninstall[] = $module;
    }
  }

  if ($needs_uninstalling) {
    $uninstalled = $module_installer->uninstall($modules_to_uninstall);
  }

  if ($needs_uninstalling && !$uninstalled) {
    \Drupal::configFactory()
      ->getEditable('core.extension')
      ->clear('module.libraries')
      ->clear('module.lightning')
      ->clear('module.lightning_install')
      ->clear('module.wxt_ext_translation')
      ->save();
    Drupal::keyValue('system.schema')->deleteMultiple([
      'libraries',
      'lightning',
      'lightning_install',
      'wxt_ext_translation',
    ]);
  }

  // Deprecate RDF additions
  \Drupal::configFactory()->getEditable('rdf.mapping.comment.comment.yml')->delete();
  \Drupal::configFactory()->getEditable('rdf.mapping.node.page.yml')->delete();

  // Deprecate Panels Welcome page.
  \Drupal::configFactory()->getEditable('page_manager.page.welcome.yml')->delete();
  \Drupal::configFactory()->getEditable('page_manager.page_variant.welcome.yml')->delete();

  $module_installer->install([
    'wxt_ext_blocks',
    'wxt_ext_comment',
    'wxt_ext_media',
    'wxt_translation',
  ]);

  // Resolve block_content workflow issue.
  $block_content = [];
  foreach (Workflow::loadMultipleByType('content_moderation') as $workflow) {
    if ($block_moderation = $workflow->getTypePlugin()->getBundlesForEntityType('block_content')) {
      $block_content[] = $block_moderation;
    }
  }

  // Resolve issues with Lightning Scheduler.
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $modules = [
    'crop',
    'entity_subqueue',
    'media',
  ];
  if (empty($block_content)) {
    $modules[] = 'block_content';
  }
  $fields = [
    'scheduled_transition_date',
    'scheduled_transition_state',
  ];
  foreach ($modules as $module) {
    foreach ($fields as $field) {
      if ($field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition($field, $module)) {
        $entity_definition_update_manager->uninstallFieldStorageDefinition($field_storage_definition);
      }
    }
  }

  // Panels Title logic adjustments.
  /** @var \Drupal\block\Entity\Block $block */
  foreach (\Drupal::entityTypeManager()->getStorage('block')->loadMultiple() as $block) {
    if ($block->id() !== NULL) {
      $visiblity_conditions = $block->getVisibilityConditions();
      $visibility_rules = $visiblity_conditions->getConfiguration();
      foreach ($visibility_rules as $k => $v) {
        if ($v['id'] == 'panels_title') {
          if (isset($v['enabled']) && $v['enabled'] == 1) {
            unset($visibility_rules[$k]['enabled']);
            $visibility_rules[$k] += [
              'is_panelized' => [
                'enabled' => 1,
              ],
            ];
            $visibility_rules[$k]['negate'] = 1;
          }
          elseif (isset($v['enabled']) && $v['enabled'] == 0) {
            unset($visibility_rules[$k]);
          }
        }
      }
      $visiblity_conditions->setConfiguration($visibility_rules);
      $block->save();
    }
  }

}
